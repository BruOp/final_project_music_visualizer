<!DOCTYPE html>
<html lang="en">
<head>
  <!--
    normalize.css removes cross-browser differences in defaults, e.g.,
    differences in how form elements appear between Firefox and IE
    See: http://necolas.github.com/normalize.css/
  -->
  <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
  <link href='http://fonts.googleapis.com/css?family=Lato:100,200,300,400,500,600,700,800&subset=latin,latin-ext' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" href="/stylesheets/normalize.css">
  <link rel="stylesheet" href="/stylesheets/application.css">

  <title>NWMP</title>
</head>
<body>
  <%= yield %>

  <script type="x-shader/x-fragment" id="fragmentShader">
     uniform float time;
    uniform sampler2D tMatCap;
    uniform sampler2D iChannel0;

    varying vec2 vUv;
    varying vec3 newPosition;
    varying vec3 e;
    varying vec3 n;
    varying mat3 normMartix;

    #extension GL_OES_standard_derivatives : enable

    void main() {

      vec3 N = normalize( cross( dFdx( newPosition.xyz ), dFdy( newPosition.xyz ) ) );
      vec3 normN = normalize( normMartix * N );

      vec3 r = reflect( e, normN );
      //r = e - 2. * dot( n, e ) * n;
      float m = 2. * sqrt( pow( r.x, 2. ) + pow( r.y, 2. ) + pow( r.z + 1., 2. ) );
      vec2 vN = r.xy / m + .5;

      vec3 base = texture2D( tMatCap, vN ).rgb;
      vec4 textureColor = texture2D(iChannel0, vUv);
      // vec3 base = texture2D( tMatCap, vN ).rgb;

      gl_FragColor = vec4( base.x, base.y, base.z, 1. );

    }
  </script>

  <script type="x-shader/x-vertex" id='vertexShader' > 
    uniform float time;
    uniform sampler2D iChannel0;

    varying vec2 vUv;
    varying vec3 newPosition;
    varying vec3 e;
    varying vec3 n;
    varying mat3 normMartix;    


    vec3 mod289(vec3 x) {
      return x - floor(x * (1.0 / 289.0)) * 289.0;
    }

    vec4 mod289(vec4 x) {
      return x - floor(x * (1.0 / 289.0)) * 289.0;
    }

    vec4 permute(vec4 x) {
         return mod289(((x*34.0)+1.0)*x);
    }

    vec4 taylorInvSqrt(vec4 r)
    {
      return 1.79284291400159 - 0.85373472095314 * r;
    }

    float snoise(vec3 v)
      { 
      const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
      const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

    // First corner
      vec3 i  = floor(v + dot(v, C.yyy) );
      vec3 x0 =   v - i + dot(i, C.xxx) ;

    // Other corners
      vec3 g = step(x0.yzx, x0.xyz);
      vec3 l = 1.0 - g;
      vec3 i1 = min( g.xyz, l.zxy );
      vec3 i2 = max( g.xyz, l.zxy );

      //   x0 = x0 - 0.0 + 0.0 * C.xxx;
      //   x1 = x0 - i1  + 1.0 * C.xxx;
      //   x2 = x0 - i2  + 2.0 * C.xxx;
      //   x3 = x0 - 1.0 + 3.0 * C.xxx;
      vec3 x1 = x0 - i1 + C.xxx;
      vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
      vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

    // Permutations
      i = mod289(i); 
      vec4 p = permute( permute( permute( 
                 i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
               + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
               + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

    // Gradients: 7x7 points over a square, mapped onto an octahedron.
    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
      float n_ = 0.142857142857; // 1.0/7.0
      vec3  ns = n_ * D.wyz - D.xzx;

      vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

      vec4 x_ = floor(j * ns.z);
      vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

      vec4 x = x_ *ns.x + ns.yyyy;
      vec4 y = y_ *ns.x + ns.yyyy;
      vec4 h = 1.0 - abs(x) - abs(y);

      vec4 b0 = vec4( x.xy, y.xy );
      vec4 b1 = vec4( x.zw, y.zw );

      //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
      //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
      vec4 s0 = floor(b0)*2.0 + 1.0;
      vec4 s1 = floor(b1)*2.0 + 1.0;
      vec4 sh = -step(h, vec4(0.0));

      vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
      vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

      vec3 p0 = vec3(a0.xy,h.x);
      vec3 p1 = vec3(a0.zw,h.y);
      vec3 p2 = vec3(a1.xy,h.z);
      vec3 p3 = vec3(a1.zw,h.w);

    //Normalise gradients
      vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
      p0 *= norm.x;
      p1 *= norm.y;
      p2 *= norm.z;
      p3 *= norm.w;

    // Mix final noise value
      vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
      m = m * m;
      return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                    dot(p2,x2), dot(p3,x3) ) );
    }

    float turbulence( vec3 p ) {
        float w = 100.0;
        float t = -.5;
        for (float f = 1.0 ; f <= 10.0 ; f++ ){
            float power = pow( 2.0, f );
            t += abs(snoise(vec3(power * p )));
        }
        return t;
    }

    void main() {

        vUv = uv;

        vec4 textureColor = texture2D(iChannel0, uv);

        // get a turbulent 3d noise using the normal, normal to high freq
        // noise = 1.0 *  -.10 * turbulence( .5 * normal + time/500.);
        // noise = 0.0;
        
        // get a 3d noise using the position, low frequency
        float b = 2.0 * snoise( (2.*time) + 0.05 * position);
        
        // compose both noises
        float displacement = b;
        
        // move the position along the normal and transform it
        newPosition = position + normal * displacement + 5.0 * normal * textureColor.rgb;
        // vec3 newPosition = position + normal * (textureColor.xyz * 10.0);

        vec4 p = vec4( newPosition, 1. );

        e = normalize( vec3( modelViewMatrix * vec4( position, 1.0 ) ) );
        n = normalize( normalMatrix * normal );

        normMartix = normalMatrix;

        gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1. );
    }

  </script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r71/three.min.js"></script>
  <script src="javascript/OrbitControls.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script>
  <script src="https://fb.me/JSXTransformer-0.13.3.js"></script>
  <script src="https://fb.me/react-with-addons-0.13.3.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
  <script src="javascript/jquery.sliphover.js"></script>
  <script src="/javascript/grid_caption.js"></script>
  <script type="text/jsx" src="/javascript/components/appview.jsx"></script>
  <script type="text/jsx" src="/javascript/components/audiowave.jsx"></script>
  <script type="text/jsx" src="/javascript/components/edit_view.jsx"></script>
  <script type="text/jsx" src="/javascript/components/parameter_menu.jsx"></script>
  <script type="text/jsx" src="/javascript/components/menuDrawer.jsx"></script>
  <script type="text/jsx" src="/javascript/components/visualization_item.jsx"></script>
  <script type="text/jsx" src="/javascript/components/sortMenuHeader.jsx"></script>
  <script type="text/jsx" src="/javascript/components/sortMenu.jsx"></script>
  <script type="text/jsx" src="/javascript/components/searchBar.jsx"></script>
  <script type="text/jsx" src="/javascript/components/visualization_list.jsx"></script>
  <script type="text/jsx" src="/javascript/components/matcap_item.jsx"></script>
  <script src="/javascript/visualization.js"></script>
  <script src="/javascript/transition.js"></script>
  <script src="/javascript/soundcloud.js"></script>
  <script type="text/jsx" src="/javascript/application.jsx"></script>
  <script src="/javascript/wavesurfer/wavesurfer.min.js"></script>
  <script src="/javascript/wavesurfer/wavesurfer.timeline.js"></script>
  <script src="/javascript/wavesurfer/plugin/wavesurfer.regions.js"></script>
  <script src="/javascript/music_interface.js"></script>
  <script src="/javascript/webgl_visualizer.js"></script>
  <script src="//connect.soundcloud.com/sdk-2.0.0.js"></script>
</body>
</html>
